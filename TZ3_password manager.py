# Необходимо реализовать приложение для хранения паролей от аккаунтов. В приложении можно будет добавлять и изменять
# логины, пароли и адреса сайтов, на которых аккаунты зарегистрированы. Приложение должно при надобности само
# генерировать сложный длинный пароль. Приложение должно искать у пользователя совпадающие пароли и предупреждать
# об этом. Вся инф-ия должна сохраняться в отдельный файл.
# План: 1. Придумаем, как хранить данные. 2. Напишем ф-ии для добавления и изменения паролей. 3. Реализуем генерацию
# паролей разного вида. 4. Напишем ф-ии поиска и вывода паролей. 5. Создадим ф-ию для поиска уязвимостей.
import json
import string# библиотека для работы со строками (заглавные буквы, все цифры и т.д)
import random# для случайного выбора генерации пароля

symbols = string.ascii_letters + string.digits + "!_?"# все символы, кот. могут использоваться для генернации нового пароля
g = "aiuoe"# все гласные
s = "mtqbschvdjlfkrznypxwg"# все согласные

def load_db(filename):# считывает данные из json
    with open(filename) as file:
        db = json.load(file)

    return db# ф-ия возвращает считаные данные

def save_db(filename, db):# сохраняет наш список из словарей
    with open(filename, "w") as file:
        json.dump(db, file, indent=2)

# Каждый аккаунт будет представлен словарём.
db = [
    {
        "login": "admin",
        "password": "123",
        "site": "ya.ru"
    },
    {
"login": "admin",
        "password": "123",
        "site": "google.com"
    }
]
# save_db("user.json", db)
# db = load_db("user.json")
# print(db)# выводим нашу переменную с загруженными данными
# Напишем ф-ию для добавления и изменения паролей
def add_pass(db):# добавляет пароль, спрашивая с клавиатуры
    site = input("Введите название сайта: ")
    login = input("Введите логин: ")
    password = input("Введите пароль: ")

    db.append(
        {
        "login": "login",
        "password": "password",
        "site": "site"
        }
    )
# Напишем ф-ию для изменения записи с паролем
def change(subject, prev):# ф-ия используется для взаимодействия с пользователем. subject-это поле, по которому
    # уточняем изменения; prev-это предыдущее значение
    t = input(f"Введите {subject} ({prev}):")
    if t == "":
        return prev# если пользователь оставляет пустую строку, то ничего не меняется в его данных
    else:
        return t

def change_pass(info):# изменяет запись с паролем
    info["site"] = change("название сайта", info["site"])
    info["login"] = change("логин", info["login"])
    info["password"] = change("пароль", info["password"])

# Пароль должен содержать буквы, цифры, символы. Нам нужно проверить хорош ли пароль, для этого проверяем наличие
# единого символа
def compare(s1, s2):# Ф-ия берёт две строки и проверяет есть ли в ней общий символ. Используем для этого структуру множеств
    s1_set = set(s1)
    s2_set = set(s2)
    # делаем пересечение первого и второго множества
    inter = s1_set.intersection(s2_set)# Если множество символов и там, и там не пустое, значит в строках есть общий
    # Символ, значит следующее условие выполняется. Иначе если пересечение пустое, значит нет общих символов и
    # возвращает False

    return len(inter) > 0

#Создадим ф-ию генерации пароля
def gen_pass(L):# генерирует случайный пароль, кот. подойдёт под наши требования
    while True:
        res = "" # создаём пустую строку и заполняем её случайными символами
        for i in range(L):
            res += random.choice(symbols)
            #Проверим три условия. Что есть в пароле символ с маленькой буквой

        bools = [
            compare(res, string.ascii_lowercase),
            compare(res, string.ascii_uppercase),
            compare(res, string.digits),
            compare(res, "!_?"),
            res[0] not in string.ascii_uppercase
        ]
        if all(bools):
            return res

def gen_ease_pass(L):# будем генерировать простой пароль, используюя согласные и гласные буквы
    res = ""
    for i in range(L-3):# делаем проход от нуля до L-3, не включая L-3 т.к последние 3 символа будут цифрами
        if i % 2 == 0:
            res += random.choice(s)
        else:
            res += random.choice(g)

    for i in range(3):# три раза длобавляем в конец цифры
        res += random.choice(string.digits)

    return res

def add_and_gen(db):# добавляет запись с паролем для какого-то сайта, при этом генерируя пароль самостоятельно
    site = input("Введите название сайта: ")
    login = input("Введите логин: ")
    L = int(input("Введите длину пароля: "))
    t = input("Генерировать сложный пароль (y/N)? ")
    if "y" in t.lower():
        password = gen_pass(L)
    else:
        password = gen_ease_pass(L)

    db.append(
        {
            "login": login,
            "password": password,
            "site": site
        }
    )
# Напишем ф-ии поиска и вывода паролей. Поиск будет простой - по названию сайта.
#Создадим ф-ию для красивого вывода в виде таблички
def show(info, num):# Пронумеруем пароли
    print(f"{num:3} | {info['site']:15} | {info['login']:15} | {info['password']:15}")

def search(db):# поиск будем использовать для просмотра пароля, удаления пароля, изменения пароля.
    site = input("Введите название сайта: ")
    results = []# создадим список и будем добавлять в него подходящие пароли
    for info in db:
        if site in info["site"]:#Если строка, которую ввёл пользователь содержится в названии сайта, то он нам подходит
            results.append(info)
    for num, info in enumerate(results):# в цикле пройдёмся по всем подходящим паролям и пронумеруем наш список результатов
        show(info, num)

    m = pass_mode()# т.е если будет введено 1 или что-то другое, то перейдём к нашим обычным режимам
    if m == "2":# когда мы получаем результаты, мы не знаем какой индекс имеет запись в исходном списке db. Чтобы
        #удалить пароль, нужно из этого списка удалить запись (словарь). Удаление можно сделать по индексу, но мы
        # не запоминаем индекс, т.к попадая в results, инф-ия об индексах утрачивается. Тогда будем сравнивать словари
        num = int(input("Введите номер: "))# появится список с пронумерованным паролем
        db.remove(results[num])# передаём запись, кот. нужно стереть, спросив номер. Т.е появляется список с нпронумер-ми
        #паролями, пользователь вводит номер, кот. нужно удалить, мы находим в списке results пароль с таким номером и
        #удаляем его из исходного списка
    elif m == "3":# т.к словари-это изменяемый тип данных, они передаются по ссылке
        num = int(input("Введите номер:"))
        info = results[num]
        change_pass(info)

def pass_mode():# ф-ия, кот. спрашивает что нужно сделать
    print("Список действий:")
    print("1. Выйти из поиска")
    print("2. Удалить пароль")
    print("3. Изменить пароль")
    m = input("Введите номер действия:")
    return m

# Создадим ф-ию для поиска уязвимостей.
def check(db):# посчитаем сколько раз каждый пароль встретился
    cnt = {}# создаём счётчик в виде словаря
    for info in db:
        if info["password"] in cnt:
            cnt[info["password"]] += 1
        else:
            cnt[info["password"]] = 1# идём по паролям, если пароль есть уже в словаре в виде ключа, то мы его уже
            #посчитали
        for password, num in cnt.items():
            if num > 1:
                print(f'Пароль "{password}" не безопасен! Он используется на сайтах:')
                for info in db:
                    if info["password"] == password:# если праоль равен такой записи, то печатаем
                        print(f"сайт: {info['site']:15}, логин:{info['login']:15}")

# db = []# создаём пустую базу данных с паролями
# add_and_gen(db)
# add_and_gen(db)# добавим два разных пароля, две разные записи
# print(db)

# Подгрузим нашу базу данных
# db = load_db("user.json")
# # search(db)
# check(db)

# db = []
# add_pass(db)
# print(db)
# change_pass(db[0])
# print(db)

# Далее нам всё нужно собрать, чтобы получить полноценную программу. Создадим цикл
def mode():# спрашиваем у пользователя какой режим он хочет использовать
    print("Список режимов:")
    print("1. Добавить пароль")
    print("2. Сгенерировать пароль")
    print("3. Найти пароль")
    print("4. Найти уязвимости")
    print("5. Выйти из программы")
    m = input("Введите номер режима:")
    return m

def loop(filename):# это основной цикл нашей программы, в кот. последовательно проверяется какой режим выбрал пользователь
    #и вызвваются соответствующие ф-ии
    db = load_db(filename)# загружаем наши данные
    while True:
        m = mode()# в зависимости от режима, выполняем действия
        if m == "1":
            add_pass(db)
        elif m == "2":
            add_and_gen(db)
        elif m == "3":
            search(db)
        elif m == "4":
            check(db)
        elif m == "5":
            break
        else:
            print("Нет такого режима!")

    save_db(filename, db)# сохраняем

loop("user.json")